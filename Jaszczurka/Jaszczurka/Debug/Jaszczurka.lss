
Jaszczurka.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000073f  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  0000073f  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000073f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000076e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d54  00000000  00000000  000007de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bf  00000000  00000000  00001532  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000665  00000000  00000000  00001cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b7  00000000  00000000  00002654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00002a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000684  00000684  00000738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_18 00000032  000005a6  000005a6  0000065a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_14 00000022  00000628  00000628  000006dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.Timer0Init 00000018  0000064a  0000064a  000006fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.USART_Init 00000016  00000662  00000662  00000716  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PWM_Init 00000076  000004f2  000004f2  000005a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.posit   00000090  000003e4  000003e4  00000498  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.ChangeMoveType 00000132  000002b2  000002b2  00000366  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.TurnOff 0000003e  00000568  00000568  0000061c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.move    000001ac  00000106  00000106  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.main    0000007e  00000474  00000474  00000528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.t        00000001  0080010e  0080010e  0000073f  2**0
                  ALLOC
 25 .progmemx.data.leds 00000005  000000f4  000000f4  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .bss.received 00000001  0080010f  0080010f  0000073f  2**0
                  ALLOC
 27 .progmemx.data.right 00000009  000000e2  000000e2  00000196  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 28 .progmemx.data.left 00000009  000000eb  000000eb  0000019f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 29 .progmemx.data.backward 00000005  000000f9  000000f9  000001ad  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 30 .progmemx.data.forward 00000005  000000fe  000000fe  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 31 .bss.step     00000001  00800110  00800110  0000073f  2**0
                  ALLOC
 32 .data.pos     00000003  0080010b  00000688  0000073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 33 .progmemx.data.servo 00000003  00000103  00000103  000001b7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .text.libgcc.div 00000028  000005d8  000005d8  0000068c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.libgcc  0000000c  00000678  00000678  0000072c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.libgcc.div 00000028  00000600  00000600  000006b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
   4:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
   8:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
   c:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  10:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  14:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  18:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  1c:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  20:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  24:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  28:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  2c:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  30:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  34:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  38:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_14>
  3c:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  40:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  44:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  48:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_18>
  4c:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  50:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  54:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  58:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  5c:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  60:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  64:	0c 94 42 03 	jmp	0x684	; 0x684 <__bad_interrupt>
  68:	a0 00       	.word	0x00a0	; ????
  6a:	ae 00       	.word	0x00ae	; ????
  6c:	bf 00       	.word	0x00bf	; ????
  6e:	d6 00       	.word	0x00d6	; ????
  70:	e7 00       	.word	0x00e7	; ????
  72:	fe 00       	.word	0x00fe	; ????
  74:	0d 01       	movw	r0, r26
  76:	22 01       	movw	r4, r4
  78:	30 01       	movw	r6, r0
  7a:	45 01       	movw	r8, r10

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 0b       	sbc	r16, r17
  80:	80 01       	movw	r16, r0
  82:	0b 01       	movw	r0, r22
  84:	0e 00       	.word	0x000e	; ????
  86:	06 88       	ldd	r0, Z+22	; 0x16
  88:	01 0e       	add	r0, r17
  8a:	01 11       	cpse	r16, r1
  8c:	80 00       	.word	0x0080	; ????

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d8 e0       	ldi	r29, 0x08	; 8
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	ec e7       	ldi	r30, 0x7C	; 124
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	17 c0       	rjmp	.+46     	; 0xd0 <__do_clear_bss+0x8>
  a2:	b5 91       	lpm	r27, Z+
  a4:	a5 91       	lpm	r26, Z+
  a6:	35 91       	lpm	r19, Z+
  a8:	25 91       	lpm	r18, Z+
  aa:	05 91       	lpm	r16, Z+
  ac:	07 fd       	sbrc	r16, 7
  ae:	0c c0       	rjmp	.+24     	; 0xc8 <__do_clear_bss>
  b0:	95 91       	lpm	r25, Z+
  b2:	85 91       	lpm	r24, Z+
  b4:	ef 01       	movw	r28, r30
  b6:	f9 2f       	mov	r31, r25
  b8:	e8 2f       	mov	r30, r24
  ba:	05 90       	lpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x20>
  c4:	fe 01       	movw	r30, r28
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <__do_clear_bss+0x8>

000000c8 <__do_clear_bss>:
  c8:	1d 92       	st	X+, r1
  ca:	a2 17       	cp	r26, r18
  cc:	b3 07       	cpc	r27, r19
  ce:	e1 f7       	brne	.-8      	; 0xc8 <__do_clear_bss>
  d0:	ed 38       	cpi	r30, 0x8D	; 141
  d2:	f4 07       	cpc	r31, r20
  d4:	31 f7       	brne	.-52     	; 0xa2 <__do_copy_data+0x8>
  d6:	0e 94 3a 02 	call	0x474	; 0x474 <main>
  da:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>

Disassembly of section .text:

00000684 <__bad_interrupt>:
 684:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_18:

000005a6 <__vector_18>:
#define intnumber inttime/256 //liczba wykonywanych przerwañ znim zostanie urucho iona w³aœciwa funkcja

volatile uint8_t t=0;//time

//przerwanie do odbioru danych
ISR (USART_RX_vect) {
 5a6:	1f 92       	push	r1
 5a8:	0f 92       	push	r0
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	0f 92       	push	r0
 5ae:	11 24       	eor	r1, r1
 5b0:	8f 93       	push	r24
 5b2:	9f 93       	push	r25
	char rec=UDR0;//wpisanie nowych danych chara
 5b4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if(rec != buf)//sprawdzenie, czy siê nie zmieni³y
 5b8:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <buf>
 5bc:	89 17       	cp	r24, r25
 5be:	29 f0       	breq	.+10     	; 0x5ca <__vector_18+0x24>
	{
		buf = rec;//przypisanie odebranych danych do buffera
 5c0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <buf>
		received=true;//Informacja do g³ównego programu, ¿e przysz³o coœ nowego
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <received>
	}
}
 5ca:	9f 91       	pop	r25
 5cc:	8f 91       	pop	r24
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

Disassembly of section .text.__vector_14:

00000628 <__vector_14>:

ISR (TIMER0_COMPA_vect) {
 628:	1f 92       	push	r1
 62a:	0f 92       	push	r0
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	0f 92       	push	r0
 630:	11 24       	eor	r1, r1
 632:	8f 93       	push	r24
	t++;
 634:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <t>
 638:	8f 5f       	subi	r24, 0xFF	; 255
 63a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <t>
}
 63e:	8f 91       	pop	r24
 640:	0f 90       	pop	r0
 642:	0f be       	out	0x3f, r0	; 63
 644:	0f 90       	pop	r0
 646:	1f 90       	pop	r1
 648:	18 95       	reti

Disassembly of section .text.Timer0Init:

0000064a <Timer0Init>:
	}
}

void Timer0Init()
{
	TCCR0A = (1<<WGM01);  //CTC mode
 64a:	82 e0       	ldi	r24, 0x02	; 2
 64c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (5<<CS00);   //prescaler 1024
 64e:	85 e0       	ldi	r24, 0x05	; 5
 650:	85 bd       	out	0x25, r24	; 37
	OCR0A = 255;// max = 256
 652:	8f ef       	ldi	r24, 0xFF	; 255
 654:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
 656:	ee e6       	ldi	r30, 0x6E	; 110
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	80 81       	ld	r24, Z
 65c:	82 60       	ori	r24, 0x02	; 2
 65e:	80 83       	st	Z, r24
 660:	08 95       	ret

Disassembly of section .text.USART_Init:

00000662 <USART_Init>:
}

void USART_Init( unsigned int ubrr)
{
	/* ustawienie baud */
	UBRR0H = (unsigned char)(ubrr>>8);
 662:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 666:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	/* odblokowanie odbiory i przerwañ do jego obs³ugi//i transmisji */
	UCSR0B = (1<<RXEN0)|(1<<RXCIE0);//|(1<<TXEN0);
 66a:	80 e9       	ldi	r24, 0x90	; 144
 66c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Ustawienie parametrów ramki: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);//(3<<UCSZ0), bo 3 to w dwójkowym 11, czyli na 1 jest UCSZ0 i UCSZ1
 670:	8e e0       	ldi	r24, 0x0E	; 14
 672:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 676:	08 95       	ret

Disassembly of section .text.PWM_Init:

000004f2 <PWM_Init>:
}

//inicjalizacja PWM
void PWM_Init(){
	//piny servo jako wyjœcia
	for (int i =0;i<ARRAY_SIZE(servo);i++)
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	17 c0       	rjmp	.+46     	; 0x526 <PWM_Init+0x34>
	DDRB |= (1<<servo[i]);
 4f8:	54 b1       	in	r21, 0x04	; 4
 4fa:	9b 01       	movw	r18, r22
 4fc:	07 2e       	mov	r0, r23
 4fe:	00 0c       	add	r0, r0
 500:	44 0b       	sbc	r20, r20
 502:	2d 5f       	subi	r18, 0xFD	; 253
 504:	3e 4f       	sbci	r19, 0xFE	; 254
 506:	4f 4f       	sbci	r20, 0xFF	; 255
 508:	f9 01       	movw	r30, r18
 50a:	24 91       	lpm	r18, Z
 50c:	47 fd       	sbrc	r20, 7
 50e:	20 81       	ld	r18, Z
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <PWM_Init+0x28>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	2a 95       	dec	r18
 51c:	e2 f7       	brpl	.-8      	; 0x516 <PWM_Init+0x24>
 51e:	85 2b       	or	r24, r21
 520:	84 b9       	out	0x04, r24	; 4
}

//inicjalizacja PWM
void PWM_Init(){
	//piny servo jako wyjœcia
	for (int i =0;i<ARRAY_SIZE(servo);i++)
 522:	6f 5f       	subi	r22, 0xFF	; 255
 524:	7f 4f       	sbci	r23, 0xFF	; 255
 526:	63 30       	cpi	r22, 0x03	; 3
 528:	71 05       	cpc	r23, r1
 52a:	30 f3       	brcs	.-52     	; 0x4f8 <PWM_Init+0x6>
	DDRB |= (1<<servo[i]);
	
	//Fast PWM (5); Chosen output mode (non inverting)
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);
 52c:	e0 e8       	ldi	r30, 0x80	; 128
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	80 6a       	ori	r24, 0xA0	; 160
 534:	80 83       	st	Z, r24
	//Waveform generation bit (fast PWM 10 bit - 1023)
	TCCR1A |= (1<<WGM10);
 536:	80 81       	ld	r24, Z
 538:	81 60       	ori	r24, 0x01	; 1
 53a:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
 53c:	e1 e8       	ldi	r30, 0x81	; 129
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	88 60       	ori	r24, 0x08	; 8
 544:	80 83       	st	Z, r24
	//PRESCALER 12MHz/1024=12kHz
	TCCR1B |= (1<<CS10) |(1<<CS12);
 546:	80 81       	ld	r24, Z
 548:	85 60       	ori	r24, 0x05	; 5
 54a:	80 83       	st	Z, r24
	
	//Dla Timera 2
	TCCR2A |= (1<<COM2A1);
 54c:	e0 eb       	ldi	r30, 0xB0	; 176
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	80 68       	ori	r24, 0x80	; 128
 554:	80 83       	st	Z, r24
	//Wybieramy Fast PWM z du¿ej tabeli
	TCCR2A |= (1<<WGM20)|(1<<WGM21);
 556:	80 81       	ld	r24, Z
 558:	83 60       	ori	r24, 0x03	; 3
 55a:	80 83       	st	Z, r24
	//Preskaler /1024
	TCCR2B |= ( 1<<CS22) | ( 1<<CS21) | (1<<CS20);
 55c:	e1 eb       	ldi	r30, 0xB1	; 177
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	87 60       	ori	r24, 0x07	; 7
 564:	80 83       	st	Z, r24
 566:	08 95       	ret

Disassembly of section .text.posit:

000003e4 <posit>:
}

//funkcja ustawiaj¹ca serva w ¿¹danej pozycji
void posit (volatile uint8_t *angle)
{
 3e4:	0f 93       	push	r16
 3e6:	1f 93       	push	r17
 3e8:	fc 01       	movw	r30, r24
	int range [] = {8,38};//Zmierzone, ¿eby dzia³a³y serwo od 0 do 180*
 3ea:	08 e0       	ldi	r16, 0x08	; 8
 3ec:	10 e0       	ldi	r17, 0x00	; 0
 3ee:	26 e2       	ldi	r18, 0x26	; 38
 3f0:	30 e0       	ldi	r19, 0x00	; 0

	if (angle[0]>=0&&angle[0]<=180)//pierwsze servo
 3f2:	80 81       	ld	r24, Z
 3f4:	80 81       	ld	r24, Z
 3f6:	85 3b       	cpi	r24, 0xB5	; 181
 3f8:	78 f4       	brcc	.+30     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
	{
		OCR1A = angle[0]*(range[1]-range[0])/180+range[0];
 3fa:	80 81       	ld	r24, Z
 3fc:	4e e1       	ldi	r20, 0x1E	; 30
 3fe:	84 9f       	mul	r24, r20
 400:	c0 01       	movw	r24, r0
 402:	11 24       	eor	r1, r1
 404:	64 eb       	ldi	r22, 0xB4	; 180
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divmodhi4>
 40c:	68 5f       	subi	r22, 0xF8	; 248
 40e:	7f 4f       	sbci	r23, 0xFF	; 255
 410:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 414:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	}

	if (angle[1]>=0&&angle[1]<=180)//drugie servo
 418:	81 81       	ldd	r24, Z+1	; 0x01
 41a:	81 81       	ldd	r24, Z+1	; 0x01
 41c:	85 3b       	cpi	r24, 0xB5	; 181
 41e:	98 f4       	brcc	.+38     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
	{
		OCR1B = angle[1]*(range[1]-range[0])/180 + range[0];
 420:	61 81       	ldd	r22, Z+1	; 0x01
 422:	a9 01       	movw	r20, r18
 424:	40 1b       	sub	r20, r16
 426:	51 0b       	sbc	r21, r17
 428:	64 9f       	mul	r22, r20
 42a:	c0 01       	movw	r24, r0
 42c:	65 9f       	mul	r22, r21
 42e:	90 0d       	add	r25, r0
 430:	11 24       	eor	r1, r1
 432:	64 eb       	ldi	r22, 0xB4	; 180
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divmodhi4>
 43a:	60 0f       	add	r22, r16
 43c:	71 1f       	adc	r23, r17
 43e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 442:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	}
	if (angle[2]>=0&&angle[2]<=180)//trzecie servo
 446:	82 81       	ldd	r24, Z+2	; 0x02
 448:	82 81       	ldd	r24, Z+2	; 0x02
 44a:	85 3b       	cpi	r24, 0xB5	; 181
 44c:	80 f4       	brcc	.+32     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
	{
		OCR2A = angle[2]*(range[1]-range[0])/180+range[0];
 44e:	62 81       	ldd	r22, Z+2	; 0x02
 450:	a9 01       	movw	r20, r18
 452:	40 1b       	sub	r20, r16
 454:	51 0b       	sbc	r21, r17
 456:	64 9f       	mul	r22, r20
 458:	c0 01       	movw	r24, r0
 45a:	65 9f       	mul	r22, r21
 45c:	90 0d       	add	r25, r0
 45e:	11 24       	eor	r1, r1
 460:	64 eb       	ldi	r22, 0xB4	; 180
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divmodhi4>
 468:	06 0f       	add	r16, r22
 46a:	00 93 b3 00 	sts	0x00B3, r16	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	}
}
 46e:	1f 91       	pop	r17
 470:	0f 91       	pop	r16
 472:	08 95       	ret

Disassembly of section .text.ChangeMoveType:

000002b2 <ChangeMoveType>:
	posit (pos);
}

void ChangeMoveType(char c)
{
	step = 0;
 2b2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <step>
	switch (c)//przypisanie odpowiednich wartoœci do tabeli mtab[] w zale¿noœci od otrzymanych danych
 2b6:	8c 36       	cpi	r24, 0x6C	; 108
 2b8:	09 f4       	brne	.+2      	; 0x2bc <ChangeMoveType+0xa>
 2ba:	58 c0       	rjmp	.+176    	; 0x36c <ChangeMoveType+0xba>
 2bc:	28 f4       	brcc	.+10     	; 0x2c8 <ChangeMoveType+0x16>
 2be:	82 36       	cpi	r24, 0x62	; 98
 2c0:	c1 f1       	breq	.+112    	; 0x332 <ChangeMoveType+0x80>
 2c2:	86 36       	cpi	r24, 0x66	; 102
 2c4:	c9 f0       	breq	.+50     	; 0x2f8 <ChangeMoveType+0x46>
 2c6:	87 c0       	rjmp	.+270    	; 0x3d6 <ChangeMoveType+0x124>
 2c8:	82 37       	cpi	r24, 0x72	; 114
 2ca:	09 f4       	brne	.+2      	; 0x2ce <ChangeMoveType+0x1c>
 2cc:	6c c0       	rjmp	.+216    	; 0x3a6 <ChangeMoveType+0xf4>
 2ce:	83 37       	cpi	r24, 0x73	; 115
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <ChangeMoveType+0x22>
 2d2:	7c c0       	rjmp	.+248    	; 0x3cc <ChangeMoveType+0x11a>
 2d4:	80 c0       	rjmp	.+256    	; 0x3d6 <ChangeMoveType+0x124>
	{
		case FORWARD_MESSAGE:
		{
			for (int i = 0;i<ARRAY_SIZE(forward);i++)
			mtab[i]=forward[i];
 2d6:	9c 01       	movw	r18, r24
 2d8:	09 2e       	mov	r0, r25
 2da:	00 0c       	add	r0, r0
 2dc:	44 0b       	sbc	r20, r20
 2de:	22 50       	subi	r18, 0x02	; 2
 2e0:	3f 4f       	sbci	r19, 0xFF	; 255
 2e2:	4f 4f       	sbci	r20, 0xFF	; 255
 2e4:	f9 01       	movw	r30, r18
 2e6:	24 91       	lpm	r18, Z
 2e8:	47 fd       	sbrc	r20, 7
 2ea:	20 81       	ld	r18, Z
 2ec:	fc 01       	movw	r30, r24
 2ee:	e0 50       	subi	r30, 0x00	; 0
 2f0:	ff 4f       	sbci	r31, 0xFF	; 255
 2f2:	20 83       	st	Z, r18
	step = 0;
	switch (c)//przypisanie odpowiednich wartoœci do tabeli mtab[] w zale¿noœci od otrzymanych danych
	{
		case FORWARD_MESSAGE:
		{
			for (int i = 0;i<ARRAY_SIZE(forward);i++)
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <ChangeMoveType+0x4a>
}

void ChangeMoveType(char c)
{
	step = 0;
	switch (c)//przypisanie odpowiednich wartoœci do tabeli mtab[] w zale¿noœci od otrzymanych danych
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
	{
		case FORWARD_MESSAGE:
		{
			for (int i = 0;i<ARRAY_SIZE(forward);i++)
 2fc:	85 30       	cpi	r24, 0x05	; 5
 2fe:	91 05       	cpc	r25, r1
 300:	50 f3       	brcs	.-44     	; 0x2d6 <ChangeMoveType+0x24>
			mtab[i]=forward[i];
			mtab[9] = ARRAY_SIZE(forward);
 302:	85 e0       	ldi	r24, 0x05	; 5
 304:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
			PORTD |=(1<<leds[1]);
 308:	8b b1       	in	r24, 0x0b	; 11
 30a:	88 60       	ori	r24, 0x08	; 8
 30c:	8b b9       	out	0x0b, r24	; 11
			break;
 30e:	08 95       	ret
		}
		case BACK_MESSAGE:
		{
			for (int i = 0;i<ARRAY_SIZE(backward);i++)
			mtab[i]=backward[i];
 310:	9c 01       	movw	r18, r24
 312:	09 2e       	mov	r0, r25
 314:	00 0c       	add	r0, r0
 316:	44 0b       	sbc	r20, r20
 318:	27 50       	subi	r18, 0x07	; 7
 31a:	3f 4f       	sbci	r19, 0xFF	; 255
 31c:	4f 4f       	sbci	r20, 0xFF	; 255
 31e:	f9 01       	movw	r30, r18
 320:	24 91       	lpm	r18, Z
 322:	47 fd       	sbrc	r20, 7
 324:	20 81       	ld	r18, Z
 326:	fc 01       	movw	r30, r24
 328:	e0 50       	subi	r30, 0x00	; 0
 32a:	ff 4f       	sbci	r31, 0xFF	; 255
 32c:	20 83       	st	Z, r18
			PORTD |=(1<<leds[1]);
			break;
		}
		case BACK_MESSAGE:
		{
			for (int i = 0;i<ARRAY_SIZE(backward);i++)
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	02 c0       	rjmp	.+4      	; 0x336 <ChangeMoveType+0x84>
}

void ChangeMoveType(char c)
{
	step = 0;
	switch (c)//przypisanie odpowiednich wartoœci do tabeli mtab[] w zale¿noœci od otrzymanych danych
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
			PORTD |=(1<<leds[1]);
			break;
		}
		case BACK_MESSAGE:
		{
			for (int i = 0;i<ARRAY_SIZE(backward);i++)
 336:	85 30       	cpi	r24, 0x05	; 5
 338:	91 05       	cpc	r25, r1
 33a:	50 f3       	brcs	.-44     	; 0x310 <ChangeMoveType+0x5e>
			mtab[i]=backward[i];
			mtab[9] = ARRAY_SIZE(backward);
 33c:	85 e0       	ldi	r24, 0x05	; 5
 33e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
			PORTD |=(1<<leds[2]);
 342:	8b b1       	in	r24, 0x0b	; 11
 344:	80 61       	ori	r24, 0x10	; 16
 346:	8b b9       	out	0x0b, r24	; 11
			break;
 348:	08 95       	ret
		}
		case LEFT_MESSAGE:
		{
			for (int i = 0;i<ARRAY_SIZE(left);i++)
			mtab[i]=left[i];
 34a:	9c 01       	movw	r18, r24
 34c:	09 2e       	mov	r0, r25
 34e:	00 0c       	add	r0, r0
 350:	44 0b       	sbc	r20, r20
 352:	25 51       	subi	r18, 0x15	; 21
 354:	3f 4f       	sbci	r19, 0xFF	; 255
 356:	4f 4f       	sbci	r20, 0xFF	; 255
 358:	f9 01       	movw	r30, r18
 35a:	24 91       	lpm	r18, Z
 35c:	47 fd       	sbrc	r20, 7
 35e:	20 81       	ld	r18, Z
 360:	fc 01       	movw	r30, r24
 362:	e0 50       	subi	r30, 0x00	; 0
 364:	ff 4f       	sbci	r31, 0xFF	; 255
 366:	20 83       	st	Z, r18
			PORTD |=(1<<leds[2]);
			break;
		}
		case LEFT_MESSAGE:
		{
			for (int i = 0;i<ARRAY_SIZE(left);i++)
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	02 c0       	rjmp	.+4      	; 0x370 <ChangeMoveType+0xbe>
}

void ChangeMoveType(char c)
{
	step = 0;
	switch (c)//przypisanie odpowiednich wartoœci do tabeli mtab[] w zale¿noœci od otrzymanych danych
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
			PORTD |=(1<<leds[2]);
			break;
		}
		case LEFT_MESSAGE:
		{
			for (int i = 0;i<ARRAY_SIZE(left);i++)
 370:	89 30       	cpi	r24, 0x09	; 9
 372:	91 05       	cpc	r25, r1
 374:	50 f3       	brcs	.-44     	; 0x34a <ChangeMoveType+0x98>
			mtab[i]=left[i];
			mtab[9] = ARRAY_SIZE(left);
 376:	89 e0       	ldi	r24, 0x09	; 9
 378:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
			PORTD |=(1<<leds[3]);
 37c:	8b b1       	in	r24, 0x0b	; 11
 37e:	80 62       	ori	r24, 0x20	; 32
 380:	8b b9       	out	0x0b, r24	; 11
			break;
 382:	08 95       	ret
		}
		case RIGHT_MESSAGE:
		{
			for (int i = 0;i<ARRAY_SIZE(right);i++)
			mtab[i]=right[i];
 384:	9c 01       	movw	r18, r24
 386:	09 2e       	mov	r0, r25
 388:	00 0c       	add	r0, r0
 38a:	44 0b       	sbc	r20, r20
 38c:	2e 51       	subi	r18, 0x1E	; 30
 38e:	3f 4f       	sbci	r19, 0xFF	; 255
 390:	4f 4f       	sbci	r20, 0xFF	; 255
 392:	f9 01       	movw	r30, r18
 394:	24 91       	lpm	r18, Z
 396:	47 fd       	sbrc	r20, 7
 398:	20 81       	ld	r18, Z
 39a:	fc 01       	movw	r30, r24
 39c:	e0 50       	subi	r30, 0x00	; 0
 39e:	ff 4f       	sbci	r31, 0xFF	; 255
 3a0:	20 83       	st	Z, r18
			PORTD |=(1<<leds[3]);
			break;
		}
		case RIGHT_MESSAGE:
		{
			for (int i = 0;i<ARRAY_SIZE(right);i++)
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <ChangeMoveType+0xf8>
}

void ChangeMoveType(char c)
{
	step = 0;
	switch (c)//przypisanie odpowiednich wartoœci do tabeli mtab[] w zale¿noœci od otrzymanych danych
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
			PORTD |=(1<<leds[3]);
			break;
		}
		case RIGHT_MESSAGE:
		{
			for (int i = 0;i<ARRAY_SIZE(right);i++)
 3aa:	89 30       	cpi	r24, 0x09	; 9
 3ac:	91 05       	cpc	r25, r1
 3ae:	50 f3       	brcs	.-44     	; 0x384 <ChangeMoveType+0xd2>
			mtab[i]=right[i];
			mtab[9] = ARRAY_SIZE(right);
 3b0:	89 e0       	ldi	r24, 0x09	; 9
 3b2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
			PORTD |=(1<<leds[4]);
 3b6:	8b b1       	in	r24, 0x0b	; 11
 3b8:	80 64       	ori	r24, 0x40	; 64
 3ba:	8b b9       	out	0x0b, r24	; 11
			break;
 3bc:	08 95       	ret
		}
		case STOP_MESSAGE:
		{
			for(int i = 0; i < ARRAY_SIZE(right); i++)
			{
				mtab[i] = 9;//all values set to 9 -> the robot will not move				
 3be:	fc 01       	movw	r30, r24
 3c0:	e0 50       	subi	r30, 0x00	; 0
 3c2:	ff 4f       	sbci	r31, 0xFF	; 255
 3c4:	29 e0       	ldi	r18, 0x09	; 9
 3c6:	20 83       	st	Z, r18
			PORTD |=(1<<leds[4]);
			break;
		}
		case STOP_MESSAGE:
		{
			for(int i = 0; i < ARRAY_SIZE(right); i++)
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <ChangeMoveType+0x11e>
}

void ChangeMoveType(char c)
{
	step = 0;
	switch (c)//przypisanie odpowiednich wartoœci do tabeli mtab[] w zale¿noœci od otrzymanych danych
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
			PORTD |=(1<<leds[4]);
			break;
		}
		case STOP_MESSAGE:
		{
			for(int i = 0; i < ARRAY_SIZE(right); i++)
 3d0:	89 30       	cpi	r24, 0x09	; 9
 3d2:	91 05       	cpc	r25, r1
 3d4:	a0 f3       	brcs	.-24     	; 0x3be <ChangeMoveType+0x10c>
				mtab[i] = 9;//all values set to 9 -> the robot will not move				
			}
		}
		default:
		{
			mtab [9] = 1;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
			PORTD |=(1<<leds[0]);
 3dc:	8b b1       	in	r24, 0x0b	; 11
 3de:	84 60       	ori	r24, 0x04	; 4
 3e0:	8b b9       	out	0x0b, r24	; 11
 3e2:	08 95       	ret

Disassembly of section .text.TurnOff:

00000568 <TurnOff>:
	}
}

void TurnOff()//funkcja wy³¹czaj¹ca ledy
{
	for(int i=0;i<ARRAY_SIZE(leds)-1;i++)
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	18 c0       	rjmp	.+48     	; 0x59e <TurnOff+0x36>
	PORTD&=~(1<<leds[i]);
 56e:	5b b1       	in	r21, 0x0b	; 11
 570:	9b 01       	movw	r18, r22
 572:	07 2e       	mov	r0, r23
 574:	00 0c       	add	r0, r0
 576:	44 0b       	sbc	r20, r20
 578:	2c 50       	subi	r18, 0x0C	; 12
 57a:	3f 4f       	sbci	r19, 0xFF	; 255
 57c:	4f 4f       	sbci	r20, 0xFF	; 255
 57e:	f9 01       	movw	r30, r18
 580:	24 91       	lpm	r18, Z
 582:	47 fd       	sbrc	r20, 7
 584:	20 81       	ld	r18, Z
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	02 c0       	rjmp	.+4      	; 0x590 <TurnOff+0x28>
 58c:	88 0f       	add	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	2a 95       	dec	r18
 592:	e2 f7       	brpl	.-8      	; 0x58c <TurnOff+0x24>
 594:	80 95       	com	r24
 596:	85 23       	and	r24, r21
 598:	8b b9       	out	0x0b, r24	; 11
	}
}

void TurnOff()//funkcja wy³¹czaj¹ca ledy
{
	for(int i=0;i<ARRAY_SIZE(leds)-1;i++)
 59a:	6f 5f       	subi	r22, 0xFF	; 255
 59c:	7f 4f       	sbci	r23, 0xFF	; 255
 59e:	64 30       	cpi	r22, 0x04	; 4
 5a0:	71 05       	cpc	r23, r1
 5a2:	28 f3       	brcs	.-54     	; 0x56e <TurnOff+0x6>
	PORTD&=~(1<<leds[i]);
}
 5a4:	08 95       	ret

Disassembly of section .text.move:

00000106 <move>:

//funkcja ustawiaj¹ca odpowiedni k¹t i poruszaj¹ca servo za pomoc¹ posit()
void move(uint8_t tab[],uint8_t size)
{
	
	if(step+1>size)//je¿eli step wykroczy³ poza tablicê
 106:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <step>
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	62 17       	cp	r22, r18
 114:	73 07       	cpc	r23, r19
 116:	1c f4       	brge	.+6      	; 0x11e <move+0x18>
	step = 1;
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <step>

	switch(tab[step])//case w zale¿noœci od kroku w podanej tablicy
 11e:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <step>
 122:	fc 01       	movw	r30, r24
 124:	e2 0f       	add	r30, r18
 126:	f1 1d       	adc	r31, r1
 128:	e0 81       	ld	r30, Z
 12a:	8e 2f       	mov	r24, r30
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	8a 30       	cpi	r24, 0x0A	; 10
 130:	91 05       	cpc	r25, r1
 132:	08 f0       	brcs	.+2      	; 0x136 <move+0x30>
 134:	b4 c0       	rjmp	.+360    	; 0x29e <move+0x198>
 136:	fc 01       	movw	r30, r24
 138:	ec 5c       	subi	r30, 0xCC	; 204
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	0c 94 3c 03 	jmp	0x678	; 0x678 <__tablejump2__>
	{
		case 0:   //zerowanie
		{
			pos[0]=90;
 140:	eb e0       	ldi	r30, 0x0B	; 11
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	8a e5       	ldi	r24, 0x5A	; 90
 146:	80 83       	st	Z, r24
			pos[1]=90;
 148:	81 83       	std	Z+1, r24	; 0x01
			pos[2]=90;
 14a:	82 83       	std	Z+2, r24	; 0x02
			TurnOff();
 14c:	0e 94 b4 02 	call	0x568	; 0x568 <TurnOff>
			
			step++;
 150:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
			break;
 15a:	a6 c0       	rjmp	.+332    	; 0x2a8 <move+0x1a2>
		}
		case 1:   //obrót œrodka
		{
			pos[1]++;
 15c:	eb e0       	ldi	r30, 0x0B	; 11
 15e:	f1 e0       	ldi	r31, 0x01	; 1
 160:	81 81       	ldd	r24, Z+1	; 0x01
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	81 83       	std	Z+1, r24	; 0x01
			if(pos[1]>=105)
 166:	81 81       	ldd	r24, Z+1	; 0x01
 168:	89 36       	cpi	r24, 0x69	; 105
 16a:	28 f0       	brcs	.+10     	; 0x176 <move+0x70>
			{
				step++;
 16c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
			}
			PORTD |=(1<<leds[1]);
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	88 60       	ori	r24, 0x08	; 8
 17a:	8b b9       	out	0x0b, r24	; 11
			break;
 17c:	95 c0       	rjmp	.+298    	; 0x2a8 <move+0x1a2>
		}
		case 2:   // prawa przód, lewa ty³
		{
			pos[0]++;
 17e:	eb e0       	ldi	r30, 0x0B	; 11
 180:	f1 e0       	ldi	r31, 0x01	; 1
 182:	80 81       	ld	r24, Z
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	80 83       	st	Z, r24
			pos[2]--;
 188:	82 81       	ldd	r24, Z+2	; 0x02
 18a:	81 50       	subi	r24, 0x01	; 1
 18c:	82 83       	std	Z+2, r24	; 0x02
			
			if(pos[2] <=60 && pos[0]>=120)
 18e:	82 81       	ldd	r24, Z+2	; 0x02
 190:	8d 33       	cpi	r24, 0x3D	; 61
 192:	08 f0       	brcs	.+2      	; 0x196 <move+0x90>
 194:	89 c0       	rjmp	.+274    	; 0x2a8 <move+0x1a2>
 196:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_end>
 19a:	88 37       	cpi	r24, 0x78	; 120
 19c:	08 f4       	brcc	.+2      	; 0x1a0 <move+0x9a>
 19e:	84 c0       	rjmp	.+264    	; 0x2a8 <move+0x1a2>
			{
				step++;
 1a0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 1a4:	8f 5f       	subi	r24, 0xFF	; 255
 1a6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
 1aa:	7e c0       	rjmp	.+252    	; 0x2a8 <move+0x1a2>
			}
			break;
		}
		case 3:   //obrót œrodka w drug¹
		{
			TurnOff();
 1ac:	0e 94 b4 02 	call	0x568	; 0x568 <TurnOff>
			pos[1]--;
 1b0:	eb e0       	ldi	r30, 0x0B	; 11
 1b2:	f1 e0       	ldi	r31, 0x01	; 1
 1b4:	81 81       	ldd	r24, Z+1	; 0x01
 1b6:	81 50       	subi	r24, 0x01	; 1
 1b8:	81 83       	std	Z+1, r24	; 0x01
			
			if(pos[1] <= 75)
 1ba:	81 81       	ldd	r24, Z+1	; 0x01
 1bc:	8c 34       	cpi	r24, 0x4C	; 76
 1be:	08 f0       	brcs	.+2      	; 0x1c2 <move+0xbc>
 1c0:	73 c0       	rjmp	.+230    	; 0x2a8 <move+0x1a2>
			{
				step++;
 1c2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 1c6:	8f 5f       	subi	r24, 0xFF	; 255
 1c8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
 1cc:	6d c0       	rjmp	.+218    	; 0x2a8 <move+0x1a2>
			}
			break;
		}
		case 4:   // lewa przód,  prawa ty³
		{
			pos[0]--;
 1ce:	eb e0       	ldi	r30, 0x0B	; 11
 1d0:	f1 e0       	ldi	r31, 0x01	; 1
 1d2:	80 81       	ld	r24, Z
 1d4:	81 50       	subi	r24, 0x01	; 1
 1d6:	80 83       	st	Z, r24
			pos[2]++;
 1d8:	82 81       	ldd	r24, Z+2	; 0x02
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	82 83       	std	Z+2, r24	; 0x02
			
			if(pos[0] <=60 && pos[2]>=120)
 1de:	80 81       	ld	r24, Z
 1e0:	8d 33       	cpi	r24, 0x3D	; 61
 1e2:	08 f0       	brcs	.+2      	; 0x1e6 <move+0xe0>
 1e4:	61 c0       	rjmp	.+194    	; 0x2a8 <move+0x1a2>
 1e6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_end+0x2>
 1ea:	88 37       	cpi	r24, 0x78	; 120
 1ec:	08 f4       	brcc	.+2      	; 0x1f0 <move+0xea>
 1ee:	5c c0       	rjmp	.+184    	; 0x2a8 <move+0x1a2>
			{
				step++;
 1f0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
 1fa:	56 c0       	rjmp	.+172    	; 0x2a8 <move+0x1a2>
			}
			break;
		}
		case 5:   //zerowanie
		{
			pos[1]--;
 1fc:	eb e0       	ldi	r30, 0x0B	; 11
 1fe:	f1 e0       	ldi	r31, 0x01	; 1
 200:	81 81       	ldd	r24, Z+1	; 0x01
 202:	81 50       	subi	r24, 0x01	; 1
 204:	81 83       	std	Z+1, r24	; 0x01
			if(pos[1]<=90)
 206:	81 81       	ldd	r24, Z+1	; 0x01
 208:	8b 35       	cpi	r24, 0x5B	; 91
 20a:	08 f0       	brcs	.+2      	; 0x20e <move+0x108>
 20c:	4d c0       	rjmp	.+154    	; 0x2a8 <move+0x1a2>
			step++;
 20e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 212:	8f 5f       	subi	r24, 0xFF	; 255
 214:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
 218:	47 c0       	rjmp	.+142    	; 0x2a8 <move+0x1a2>
			break;
		}
		case 6:   //zerowanie nóg
		{
			pos[0]--;
 21a:	eb e0       	ldi	r30, 0x0B	; 11
 21c:	f1 e0       	ldi	r31, 0x01	; 1
 21e:	80 81       	ld	r24, Z
 220:	81 50       	subi	r24, 0x01	; 1
 222:	80 83       	st	Z, r24
			pos[2]++;
 224:	82 81       	ldd	r24, Z+2	; 0x02
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	82 83       	std	Z+2, r24	; 0x02
			if(pos[0]<=90&&pos[2]>=90)
 22a:	80 81       	ld	r24, Z
 22c:	8b 35       	cpi	r24, 0x5B	; 91
 22e:	e0 f5       	brcc	.+120    	; 0x2a8 <move+0x1a2>
 230:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_end+0x2>
 234:	8a 35       	cpi	r24, 0x5A	; 90
 236:	c0 f1       	brcs	.+112    	; 0x2a8 <move+0x1a2>
			step++;
 238:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
 242:	32 c0       	rjmp	.+100    	; 0x2a8 <move+0x1a2>
			break;
		}
		case 7:   //zerowanie
		{
			pos[1]++;
 244:	eb e0       	ldi	r30, 0x0B	; 11
 246:	f1 e0       	ldi	r31, 0x01	; 1
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	81 83       	std	Z+1, r24	; 0x01
			if(pos[1]>=90)
 24e:	81 81       	ldd	r24, Z+1	; 0x01
 250:	8a 35       	cpi	r24, 0x5A	; 90
 252:	50 f1       	brcs	.+84     	; 0x2a8 <move+0x1a2>
			step++;
 254:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 258:	8f 5f       	subi	r24, 0xFF	; 255
 25a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
 25e:	24 c0       	rjmp	.+72     	; 0x2a8 <move+0x1a2>
			break;
		}
		case 8:   //zerowanie nóg
		{
			pos[0]++;
 260:	eb e0       	ldi	r30, 0x0B	; 11
 262:	f1 e0       	ldi	r31, 0x01	; 1
 264:	80 81       	ld	r24, Z
 266:	8f 5f       	subi	r24, 0xFF	; 255
 268:	80 83       	st	Z, r24
			pos[2]--;
 26a:	82 81       	ldd	r24, Z+2	; 0x02
 26c:	81 50       	subi	r24, 0x01	; 1
 26e:	82 83       	std	Z+2, r24	; 0x02
			if(pos[0]>=90&&pos[2]<=90)
 270:	80 81       	ld	r24, Z
 272:	8a 35       	cpi	r24, 0x5A	; 90
 274:	c8 f0       	brcs	.+50     	; 0x2a8 <move+0x1a2>
 276:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_end+0x2>
 27a:	8b 35       	cpi	r24, 0x5B	; 91
 27c:	a8 f4       	brcc	.+42     	; 0x2a8 <move+0x1a2>
			step++;
 27e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 282:	8f 5f       	subi	r24, 0xFF	; 255
 284:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
 288:	0f c0       	rjmp	.+30     	; 0x2a8 <move+0x1a2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	81 ee       	ldi	r24, 0xE1	; 225
 28e:	94 e0       	ldi	r25, 0x04	; 4
 290:	21 50       	subi	r18, 0x01	; 1
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <move+0x18a>
 298:	00 c0       	rjmp	.+0      	; 0x29a <move+0x194>
 29a:	00 00       	nop
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <move+0x1a2>
			_delay_ms(100);//do nothing
			break;
		}
		default:
		{
			step++;
 29e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
		}
	}
	posit (pos);
 2a8:	8b e0       	ldi	r24, 0x0B	; 11
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <posit>
 2b0:	08 95       	ret

Disassembly of section .text.main:

00000474 <main>:
void CurStep();//funkcja podaj¹ca wartoœæ stp na diodach


int main()
{
	for(int i=0;i<ARRAY_SIZE(leds);i++)//ustawienie ledów jako wyjœcie
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	17 c0       	rjmp	.+46     	; 0x4a8 <main+0x34>
	{
		DDRD|=(1<<leds[i]);
 47a:	7a b1       	in	r23, 0x0a	; 10
 47c:	c9 01       	movw	r24, r18
 47e:	03 2e       	mov	r0, r19
 480:	00 0c       	add	r0, r0
 482:	aa 0b       	sbc	r26, r26
 484:	8c 50       	subi	r24, 0x0C	; 12
 486:	9f 4f       	sbci	r25, 0xFF	; 255
 488:	af 4f       	sbci	r26, 0xFF	; 255
 48a:	fc 01       	movw	r30, r24
 48c:	44 91       	lpm	r20, Z
 48e:	a7 fd       	sbrc	r26, 7
 490:	40 81       	ld	r20, Z
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <main+0x28>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	4a 95       	dec	r20
 49e:	e2 f7       	brpl	.-8      	; 0x498 <main+0x24>
 4a0:	87 2b       	or	r24, r23
 4a2:	8a b9       	out	0x0a, r24	; 10
void CurStep();//funkcja podaj¹ca wartoœæ stp na diodach


int main()
{
	for(int i=0;i<ARRAY_SIZE(leds);i++)//ustawienie ledów jako wyjœcie
 4a4:	2f 5f       	subi	r18, 0xFF	; 255
 4a6:	3f 4f       	sbci	r19, 0xFF	; 255
 4a8:	25 30       	cpi	r18, 0x05	; 5
 4aa:	31 05       	cpc	r19, r1
 4ac:	30 f3       	brcs	.-52     	; 0x47a <main+0x6>
	{
		DDRD|=(1<<leds[i]);
	}
	PWM_Init();//wywolanie inicjalizacji PWM
 4ae:	0e 94 79 02 	call	0x4f2	; 0x4f2 <PWM_Init>
	USART_Init ( MYUBRR );//wywolanie inicjalizacji UART
 4b2:	87 e6       	ldi	r24, 0x67	; 103
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 31 03 	call	0x662	; 0x662 <USART_Init>
	Timer0Init();
 4ba:	0e 94 25 03 	call	0x64a	; 0x64a <Timer0Init>
	
	sei();//uruchomienie przerwañ
 4be:	78 94       	sei

	while (1)
	{
		if(t>=intnumber)
 4c0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <t>
 4c4:	88 23       	and	r24, r24
 4c6:	41 f0       	breq	.+16     	; 0x4d8 <main+0x64>
		{
			t=0;
 4c8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <t>
			// CurStep();
			move (mtab,mtab[9]);//funkcja ustawiaj¹ca odpowiedni k¹t i poruszaj¹ca servo za pomoc¹ posit()
 4cc:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	0e 94 83 00 	call	0x106	; 0x106 <move>
		}
		
		if(received)//je¿eli zosta³y odebrane dane
 4d8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <received>
 4dc:	88 23       	and	r24, r24
 4de:	81 f3       	breq	.-32     	; 0x4c0 <main+0x4c>
		{
			TurnOff();//wy³¹czenie diod
 4e0:	0e 94 b4 02 	call	0x568	; 0x568 <TurnOff>
			ChangeMoveType(buf);
 4e4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buf>
 4e8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <ChangeMoveType>
			received = false;//ustawienie flagi na false, poniewa¿ ju¿ zmieniliœmy dane na nowe w tabeli mtab[]
 4ec:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <received>
 4f0:	e7 cf       	rjmp	.-50     	; 0x4c0 <main+0x4c>

Disassembly of section .text.libgcc.div:

000005d8 <__divmodhi4>:
 5d8:	97 fb       	bst	r25, 7
 5da:	07 2e       	mov	r0, r23
 5dc:	16 f4       	brtc	.+4      	; 0x5e2 <__divmodhi4+0xa>
 5de:	00 94       	com	r0
 5e0:	07 d0       	rcall	.+14     	; 0x5f0 <__divmodhi4_neg1>
 5e2:	77 fd       	sbrc	r23, 7
 5e4:	09 d0       	rcall	.+18     	; 0x5f8 <__divmodhi4_neg2>
 5e6:	0e 94 00 03 	call	0x600	; 0x600 <__udivmodhi4>
 5ea:	07 fc       	sbrc	r0, 7
 5ec:	05 d0       	rcall	.+10     	; 0x5f8 <__divmodhi4_neg2>
 5ee:	3e f4       	brtc	.+14     	; 0x5fe <__divmodhi4_exit>

000005f0 <__divmodhi4_neg1>:
 5f0:	90 95       	com	r25
 5f2:	81 95       	neg	r24
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	08 95       	ret

000005f8 <__divmodhi4_neg2>:
 5f8:	70 95       	com	r23
 5fa:	61 95       	neg	r22
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255

000005fe <__divmodhi4_exit>:
 5fe:	08 95       	ret

Disassembly of section .text.libgcc:

00000678 <__tablejump2__>:
 678:	ee 0f       	add	r30, r30
 67a:	ff 1f       	adc	r31, r31
 67c:	05 90       	lpm	r0, Z+
 67e:	f4 91       	lpm	r31, Z
 680:	e0 2d       	mov	r30, r0
 682:	09 94       	ijmp

Disassembly of section .text.libgcc.div:

00000600 <__udivmodhi4>:
 600:	aa 1b       	sub	r26, r26
 602:	bb 1b       	sub	r27, r27
 604:	51 e1       	ldi	r21, 0x11	; 17
 606:	07 c0       	rjmp	.+14     	; 0x616 <__udivmodhi4_ep>

00000608 <__udivmodhi4_loop>:
 608:	aa 1f       	adc	r26, r26
 60a:	bb 1f       	adc	r27, r27
 60c:	a6 17       	cp	r26, r22
 60e:	b7 07       	cpc	r27, r23
 610:	10 f0       	brcs	.+4      	; 0x616 <__udivmodhi4_ep>
 612:	a6 1b       	sub	r26, r22
 614:	b7 0b       	sbc	r27, r23

00000616 <__udivmodhi4_ep>:
 616:	88 1f       	adc	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	5a 95       	dec	r21
 61c:	a9 f7       	brne	.-22     	; 0x608 <__udivmodhi4_loop>
 61e:	80 95       	com	r24
 620:	90 95       	com	r25
 622:	bc 01       	movw	r22, r24
 624:	cd 01       	movw	r24, r26
 626:	08 95       	ret
