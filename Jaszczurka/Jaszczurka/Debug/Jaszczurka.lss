
Jaszczurka.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000703  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000e0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  00000703  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000703  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000732  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c82  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076d  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f0  00000000  00000000  00001b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00002184  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000347  00000000  00000000  00002480  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000027c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000648  00000648  000006fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002888  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_18 00000032  0000056a  0000056a  0000061e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_14 00000022  000005ec  000005ec  000006a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.Timer0Init 00000018  0000060e  0000060e  000006c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.USART_Init 00000016  00000626  00000626  000006da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PWM_Init 00000076  000004b6  000004b6  0000056a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.posit   00000088  000003b0  000003b0  00000464  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.ChangeMoveType 00000114  0000029c  0000029c  00000350  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.TurnOff 0000003e  0000052c  0000052c  000005e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.move    00000198  00000104  00000104  000001b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.main    0000007e  00000438  00000438  000004ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.t        00000001  0080010e  0080010e  00000703  2**0
                  ALLOC
 25 .progmemx.data.leds 00000005  000000f2  000000f2  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .bss.received 00000001  0080010f  0080010f  00000703  2**0
                  ALLOC
 27 .progmemx.data.right 00000009  000000e0  000000e0  00000194  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 28 .progmemx.data.left 00000009  000000e9  000000e9  0000019d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 29 .progmemx.data.backward 00000005  000000f7  000000f7  000001ab  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 30 .progmemx.data.forward 00000005  000000fc  000000fc  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 31 .bss.step     00000001  00800110  00800110  00000703  2**0
                  ALLOC
 32 .data.pos     00000003  0080010b  0000064c  00000700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 33 .progmemx.data.servo 00000003  00000101  00000101  000001b5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .text.libgcc.div 00000028  0000059c  0000059c  00000650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.libgcc  0000000c  0000063c  0000063c  000006f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.libgcc.div 00000028  000005c4  000005c4  00000678  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
   8:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
   c:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  10:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  14:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  18:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  1c:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  20:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  24:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  28:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  2c:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  30:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  34:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  38:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__vector_14>
  3c:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  40:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  44:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  48:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_18>
  4c:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  50:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  54:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  58:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  5c:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  60:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  64:	0c 94 24 03 	jmp	0x648	; 0x648 <__bad_interrupt>
  68:	9f 00       	.word	0x009f	; ????
  6a:	ad 00       	.word	0x00ad	; ????
  6c:	be 00       	.word	0x00be	; ????
  6e:	d5 00       	.word	0x00d5	; ????
  70:	e6 00       	.word	0x00e6	; ????
  72:	fd 00       	.word	0x00fd	; ????
  74:	0c 01       	movw	r0, r24
  76:	21 01       	movw	r4, r2
  78:	2f 01       	movw	r4, r30

0000007a <.dinit>:
  7a:	01 00       	.word	0x0001	; ????
  7c:	01 0b       	sbc	r16, r17
  7e:	80 01       	movw	r16, r0
  80:	0b 01       	movw	r0, r22
  82:	0e 00       	.word	0x000e	; ????
  84:	06 4c       	sbci	r16, 0xC6	; 198
  86:	01 0e       	add	r0, r17
  88:	01 11       	cpse	r16, r1
  8a:	80 00       	.word	0x0080	; ????

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d8 e0       	ldi	r29, 0x08	; 8
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	ea e7       	ldi	r30, 0x7A	; 122
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	17 c0       	rjmp	.+46     	; 0xce <__do_clear_bss+0x8>
  a0:	b5 91       	lpm	r27, Z+
  a2:	a5 91       	lpm	r26, Z+
  a4:	35 91       	lpm	r19, Z+
  a6:	25 91       	lpm	r18, Z+
  a8:	05 91       	lpm	r16, Z+
  aa:	07 fd       	sbrc	r16, 7
  ac:	0c c0       	rjmp	.+24     	; 0xc6 <__do_clear_bss>
  ae:	95 91       	lpm	r25, Z+
  b0:	85 91       	lpm	r24, Z+
  b2:	ef 01       	movw	r28, r30
  b4:	f9 2f       	mov	r31, r25
  b6:	e8 2f       	mov	r30, r24
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a2 17       	cp	r26, r18
  be:	b3 07       	cpc	r27, r19
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x20>
  c2:	fe 01       	movw	r30, r28
  c4:	04 c0       	rjmp	.+8      	; 0xce <__do_clear_bss+0x8>

000000c6 <__do_clear_bss>:
  c6:	1d 92       	st	X+, r1
  c8:	a2 17       	cp	r26, r18
  ca:	b3 07       	cpc	r27, r19
  cc:	e1 f7       	brne	.-8      	; 0xc6 <__do_clear_bss>
  ce:	eb 38       	cpi	r30, 0x8B	; 139
  d0:	f4 07       	cpc	r31, r20
  d2:	31 f7       	brne	.-52     	; 0xa0 <__do_copy_data+0x8>
  d4:	0e 94 1c 02 	call	0x438	; 0x438 <main>
  d8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>

Disassembly of section .text:

00000648 <__bad_interrupt>:
 648:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_18:

0000056a <__vector_18>:
#define intnumber inttime/256 //liczba wykonywanych przerwañ znim zostanie urucho iona w³aœciwa funkcja

volatile uint8_t t=0;//time

//przerwanie do odbioru danych
ISR (USART_RX_vect) {
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	8f 93       	push	r24
 576:	9f 93       	push	r25
	char rec=UDR0;//wpisanie nowych danych chara
 578:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if(rec != buf)//sprawdzenie, czy siê nie zmieni³y
 57c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <buf>
 580:	89 17       	cp	r24, r25
 582:	29 f0       	breq	.+10     	; 0x58e <__vector_18+0x24>
	{
		buf = rec;//przypisanie odebranych danych do buffera
 584:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <buf>
		received=true;//Informacja do g³ównego programu, ¿e przysz³o coœ nowego
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <received>
	}
}
 58e:	9f 91       	pop	r25
 590:	8f 91       	pop	r24
 592:	0f 90       	pop	r0
 594:	0f be       	out	0x3f, r0	; 63
 596:	0f 90       	pop	r0
 598:	1f 90       	pop	r1
 59a:	18 95       	reti

Disassembly of section .text.__vector_14:

000005ec <__vector_14>:

ISR (TIMER0_COMPA_vect) {
 5ec:	1f 92       	push	r1
 5ee:	0f 92       	push	r0
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	0f 92       	push	r0
 5f4:	11 24       	eor	r1, r1
 5f6:	8f 93       	push	r24
	t++;
 5f8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <t>
 5fc:	8f 5f       	subi	r24, 0xFF	; 255
 5fe:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <t>
}
 602:	8f 91       	pop	r24
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

Disassembly of section .text.Timer0Init:

0000060e <Timer0Init>:
	}
}

void Timer0Init()
{
	TCCR0A = (1<<WGM01);  //CTC mode
 60e:	82 e0       	ldi	r24, 0x02	; 2
 610:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (5<<CS00);   //prescaler 1024
 612:	85 e0       	ldi	r24, 0x05	; 5
 614:	85 bd       	out	0x25, r24	; 37
	OCR0A = 255;// max = 256
 616:	8f ef       	ldi	r24, 0xFF	; 255
 618:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
 61a:	ee e6       	ldi	r30, 0x6E	; 110
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	80 81       	ld	r24, Z
 620:	82 60       	ori	r24, 0x02	; 2
 622:	80 83       	st	Z, r24
 624:	08 95       	ret

Disassembly of section .text.USART_Init:

00000626 <USART_Init>:
}

void USART_Init( unsigned int ubrr)
{
	/* ustawienie baud */
	UBRR0H = (unsigned char)(ubrr>>8);
 626:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 62a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	/* odblokowanie odbiory i przerwañ do jego obs³ugi//i transmisji */
	UCSR0B = (1<<RXEN0)|(1<<RXCIE0);//|(1<<TXEN0);
 62e:	80 e9       	ldi	r24, 0x90	; 144
 630:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Ustawienie parametrów ramki: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);//(3<<UCSZ0), bo 3 to w dwójkowym 11, czyli na 1 jest UCSZ0 i UCSZ1
 634:	8e e0       	ldi	r24, 0x0E	; 14
 636:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 63a:	08 95       	ret

Disassembly of section .text.PWM_Init:

000004b6 <PWM_Init>:
}

//inicjalizacja PWM
void PWM_Init(){
	//piny servo jako wyjœcia
	for (int i =0;i<ARRAY_SIZE(servo);i++)
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	17 c0       	rjmp	.+46     	; 0x4ea <PWM_Init+0x34>
	DDRB |= (1<<servo[i]);
 4bc:	54 b1       	in	r21, 0x04	; 4
 4be:	9b 01       	movw	r18, r22
 4c0:	07 2e       	mov	r0, r23
 4c2:	00 0c       	add	r0, r0
 4c4:	44 0b       	sbc	r20, r20
 4c6:	2f 5f       	subi	r18, 0xFF	; 255
 4c8:	3e 4f       	sbci	r19, 0xFE	; 254
 4ca:	4f 4f       	sbci	r20, 0xFF	; 255
 4cc:	f9 01       	movw	r30, r18
 4ce:	24 91       	lpm	r18, Z
 4d0:	47 fd       	sbrc	r20, 7
 4d2:	20 81       	ld	r18, Z
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <PWM_Init+0x28>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	2a 95       	dec	r18
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <PWM_Init+0x24>
 4e2:	85 2b       	or	r24, r21
 4e4:	84 b9       	out	0x04, r24	; 4
}

//inicjalizacja PWM
void PWM_Init(){
	//piny servo jako wyjœcia
	for (int i =0;i<ARRAY_SIZE(servo);i++)
 4e6:	6f 5f       	subi	r22, 0xFF	; 255
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ea:	63 30       	cpi	r22, 0x03	; 3
 4ec:	71 05       	cpc	r23, r1
 4ee:	30 f3       	brcs	.-52     	; 0x4bc <PWM_Init+0x6>
	DDRB |= (1<<servo[i]);
	
	//Fast PWM (5); Chosen output mode (non inverting)
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);
 4f0:	e0 e8       	ldi	r30, 0x80	; 128
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	80 81       	ld	r24, Z
 4f6:	80 6a       	ori	r24, 0xA0	; 160
 4f8:	80 83       	st	Z, r24
	//Waveform generation bit (fast PWM 10 bit - 1023)
	TCCR1A |= (1<<WGM10);
 4fa:	80 81       	ld	r24, Z
 4fc:	81 60       	ori	r24, 0x01	; 1
 4fe:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
 500:	e1 e8       	ldi	r30, 0x81	; 129
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	88 60       	ori	r24, 0x08	; 8
 508:	80 83       	st	Z, r24
	//PRESCALER 12MHz/1024=12kHz
	TCCR1B |= (1<<CS10) |(1<<CS12);
 50a:	80 81       	ld	r24, Z
 50c:	85 60       	ori	r24, 0x05	; 5
 50e:	80 83       	st	Z, r24
	
	//Dla Timera 2
	TCCR2A |= (1<<COM2A1);
 510:	e0 eb       	ldi	r30, 0xB0	; 176
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	80 68       	ori	r24, 0x80	; 128
 518:	80 83       	st	Z, r24
	//Wybieramy Fast PWM z du¿ej tabeli
	TCCR2A |= (1<<WGM20)|(1<<WGM21);
 51a:	80 81       	ld	r24, Z
 51c:	83 60       	ori	r24, 0x03	; 3
 51e:	80 83       	st	Z, r24
	//Preskaler /1024
	TCCR2B |= ( 1<<CS22) | ( 1<<CS21) | (1<<CS20);
 520:	e1 eb       	ldi	r30, 0xB1	; 177
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	87 60       	ori	r24, 0x07	; 7
 528:	80 83       	st	Z, r24
 52a:	08 95       	ret

Disassembly of section .text.posit:

000003b0 <posit>:
}

//funkcja ustawiaj¹ca serva w ¿¹danej pozycji
void posit (uint8_t *angle)
{
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	fc 01       	movw	r30, r24
	int range [] = {8,38};//Zmierzone, ¿eby dzia³a³y serwo od 0 do 180*
 3b6:	08 e0       	ldi	r16, 0x08	; 8
 3b8:	10 e0       	ldi	r17, 0x00	; 0
 3ba:	26 e2       	ldi	r18, 0x26	; 38
 3bc:	30 e0       	ldi	r19, 0x00	; 0

	if (angle[0]>=0&&angle[0]<=180)//pierwsze servo
 3be:	80 81       	ld	r24, Z
 3c0:	85 3b       	cpi	r24, 0xB5	; 181
 3c2:	70 f4       	brcc	.+28     	; 0x3e0 <posit+0x30>
	{
		OCR1A = angle[0]*(range[1]-range[0])/180+range[0];
 3c4:	4e e1       	ldi	r20, 0x1E	; 30
 3c6:	84 9f       	mul	r24, r20
 3c8:	c0 01       	movw	r24, r0
 3ca:	11 24       	eor	r1, r1
 3cc:	64 eb       	ldi	r22, 0xB4	; 180
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	0e 94 ce 02 	call	0x59c	; 0x59c <__divmodhi4>
 3d4:	68 5f       	subi	r22, 0xF8	; 248
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3dc:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	}

	if (angle[1]>=0&&angle[1]<=180)//drugie servo
 3e0:	91 81       	ldd	r25, Z+1	; 0x01
 3e2:	95 3b       	cpi	r25, 0xB5	; 181
 3e4:	98 f4       	brcc	.+38     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	{
		OCR1B = angle[1]*(range[1]-range[0])/180 + range[0];
 3e6:	b9 01       	movw	r22, r18
 3e8:	60 1b       	sub	r22, r16
 3ea:	71 0b       	sbc	r23, r17
 3ec:	96 9f       	mul	r25, r22
 3ee:	a0 01       	movw	r20, r0
 3f0:	97 9f       	mul	r25, r23
 3f2:	50 0d       	add	r21, r0
 3f4:	11 24       	eor	r1, r1
 3f6:	ca 01       	movw	r24, r20
 3f8:	64 eb       	ldi	r22, 0xB4	; 180
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	0e 94 ce 02 	call	0x59c	; 0x59c <__divmodhi4>
 400:	60 0f       	add	r22, r16
 402:	71 1f       	adc	r23, r17
 404:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 408:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	}
	if (angle[2]>=0&&angle[2]<=180)//trzecie servo
 40c:	92 81       	ldd	r25, Z+2	; 0x02
 40e:	95 3b       	cpi	r25, 0xB5	; 181
 410:	80 f4       	brcc	.+32     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
	{
		OCR2A = angle[2]*(range[1]-range[0])/180+range[0];
 412:	b9 01       	movw	r22, r18
 414:	60 1b       	sub	r22, r16
 416:	71 0b       	sbc	r23, r17
 418:	96 9f       	mul	r25, r22
 41a:	a0 01       	movw	r20, r0
 41c:	97 9f       	mul	r25, r23
 41e:	50 0d       	add	r21, r0
 420:	11 24       	eor	r1, r1
 422:	ca 01       	movw	r24, r20
 424:	64 eb       	ldi	r22, 0xB4	; 180
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	0e 94 ce 02 	call	0x59c	; 0x59c <__divmodhi4>
 42c:	06 0f       	add	r16, r22
 42e:	00 93 b3 00 	sts	0x00B3, r16	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	}
}
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	08 95       	ret

Disassembly of section .text.ChangeMoveType:

0000029c <ChangeMoveType>:
	posit (&pos[0]);
}

void ChangeMoveType(char c)
{
	step = 0;
 29c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <step>
	switch (c)//przypisanie odpowiednich wartoœci do tabeli mtab[] w zale¿noœci od otrzymanych danych
 2a0:	86 36       	cpi	r24, 0x66	; 102
 2a2:	e1 f0       	breq	.+56     	; 0x2dc <ChangeMoveType+0x40>
 2a4:	18 f4       	brcc	.+6      	; 0x2ac <ChangeMoveType+0x10>
 2a6:	82 36       	cpi	r24, 0x62	; 98
 2a8:	b1 f1       	breq	.+108    	; 0x316 <ChangeMoveType+0x7a>
 2aa:	7b c0       	rjmp	.+246    	; 0x3a2 <ChangeMoveType+0x106>
 2ac:	8c 36       	cpi	r24, 0x6C	; 108
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <ChangeMoveType+0x16>
 2b0:	4f c0       	rjmp	.+158    	; 0x350 <ChangeMoveType+0xb4>
 2b2:	82 37       	cpi	r24, 0x72	; 114
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <ChangeMoveType+0x1c>
 2b6:	69 c0       	rjmp	.+210    	; 0x38a <ChangeMoveType+0xee>
 2b8:	74 c0       	rjmp	.+232    	; 0x3a2 <ChangeMoveType+0x106>
	{
		case 'f':
		{
			for (int i = 0;i<ARRAY_SIZE(forward);i++)
			mtab[i]=forward[i];
 2ba:	9c 01       	movw	r18, r24
 2bc:	09 2e       	mov	r0, r25
 2be:	00 0c       	add	r0, r0
 2c0:	44 0b       	sbc	r20, r20
 2c2:	24 50       	subi	r18, 0x04	; 4
 2c4:	3f 4f       	sbci	r19, 0xFF	; 255
 2c6:	4f 4f       	sbci	r20, 0xFF	; 255
 2c8:	f9 01       	movw	r30, r18
 2ca:	24 91       	lpm	r18, Z
 2cc:	47 fd       	sbrc	r20, 7
 2ce:	20 81       	ld	r18, Z
 2d0:	fc 01       	movw	r30, r24
 2d2:	e0 50       	subi	r30, 0x00	; 0
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	20 83       	st	Z, r18
	step = 0;
	switch (c)//przypisanie odpowiednich wartoœci do tabeli mtab[] w zale¿noœci od otrzymanych danych
	{
		case 'f':
		{
			for (int i = 0;i<ARRAY_SIZE(forward);i++)
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <ChangeMoveType+0x44>
}

void ChangeMoveType(char c)
{
	step = 0;
	switch (c)//przypisanie odpowiednich wartoœci do tabeli mtab[] w zale¿noœci od otrzymanych danych
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
	{
		case 'f':
		{
			for (int i = 0;i<ARRAY_SIZE(forward);i++)
 2e0:	85 30       	cpi	r24, 0x05	; 5
 2e2:	91 05       	cpc	r25, r1
 2e4:	50 f3       	brcs	.-44     	; 0x2ba <ChangeMoveType+0x1e>
			mtab[i]=forward[i];
			mtab[9] = ARRAY_SIZE(forward);
 2e6:	85 e0       	ldi	r24, 0x05	; 5
 2e8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
			PORTD |=(1<<leds[1]);
 2ec:	8b b1       	in	r24, 0x0b	; 11
 2ee:	88 60       	ori	r24, 0x08	; 8
 2f0:	8b b9       	out	0x0b, r24	; 11
			break;
 2f2:	08 95       	ret
		}
		case 'b':
		{
			for (int i = 0;i<ARRAY_SIZE(backward);i++)
			mtab[i]=backward[i];
 2f4:	9c 01       	movw	r18, r24
 2f6:	09 2e       	mov	r0, r25
 2f8:	00 0c       	add	r0, r0
 2fa:	44 0b       	sbc	r20, r20
 2fc:	29 50       	subi	r18, 0x09	; 9
 2fe:	3f 4f       	sbci	r19, 0xFF	; 255
 300:	4f 4f       	sbci	r20, 0xFF	; 255
 302:	f9 01       	movw	r30, r18
 304:	24 91       	lpm	r18, Z
 306:	47 fd       	sbrc	r20, 7
 308:	20 81       	ld	r18, Z
 30a:	fc 01       	movw	r30, r24
 30c:	e0 50       	subi	r30, 0x00	; 0
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	20 83       	st	Z, r18
			PORTD |=(1<<leds[1]);
			break;
		}
		case 'b':
		{
			for (int i = 0;i<ARRAY_SIZE(backward);i++)
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	02 c0       	rjmp	.+4      	; 0x31a <ChangeMoveType+0x7e>
}

void ChangeMoveType(char c)
{
	step = 0;
	switch (c)//przypisanie odpowiednich wartoœci do tabeli mtab[] w zale¿noœci od otrzymanych danych
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
			PORTD |=(1<<leds[1]);
			break;
		}
		case 'b':
		{
			for (int i = 0;i<ARRAY_SIZE(backward);i++)
 31a:	85 30       	cpi	r24, 0x05	; 5
 31c:	91 05       	cpc	r25, r1
 31e:	50 f3       	brcs	.-44     	; 0x2f4 <ChangeMoveType+0x58>
			mtab[i]=backward[i];
			mtab[9] = ARRAY_SIZE(backward);
 320:	85 e0       	ldi	r24, 0x05	; 5
 322:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
			PORTD |=(1<<leds[2]);
 326:	8b b1       	in	r24, 0x0b	; 11
 328:	80 61       	ori	r24, 0x10	; 16
 32a:	8b b9       	out	0x0b, r24	; 11
			break;
 32c:	08 95       	ret
		}
		case 'l':
		{
			for (int i = 0;i<ARRAY_SIZE(left);i++)
			mtab[i]=left[i];
 32e:	9c 01       	movw	r18, r24
 330:	09 2e       	mov	r0, r25
 332:	00 0c       	add	r0, r0
 334:	44 0b       	sbc	r20, r20
 336:	27 51       	subi	r18, 0x17	; 23
 338:	3f 4f       	sbci	r19, 0xFF	; 255
 33a:	4f 4f       	sbci	r20, 0xFF	; 255
 33c:	f9 01       	movw	r30, r18
 33e:	24 91       	lpm	r18, Z
 340:	47 fd       	sbrc	r20, 7
 342:	20 81       	ld	r18, Z
 344:	fc 01       	movw	r30, r24
 346:	e0 50       	subi	r30, 0x00	; 0
 348:	ff 4f       	sbci	r31, 0xFF	; 255
 34a:	20 83       	st	Z, r18
			PORTD |=(1<<leds[2]);
			break;
		}
		case 'l':
		{
			for (int i = 0;i<ARRAY_SIZE(left);i++)
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	02 c0       	rjmp	.+4      	; 0x354 <ChangeMoveType+0xb8>
}

void ChangeMoveType(char c)
{
	step = 0;
	switch (c)//przypisanie odpowiednich wartoœci do tabeli mtab[] w zale¿noœci od otrzymanych danych
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
			PORTD |=(1<<leds[2]);
			break;
		}
		case 'l':
		{
			for (int i = 0;i<ARRAY_SIZE(left);i++)
 354:	89 30       	cpi	r24, 0x09	; 9
 356:	91 05       	cpc	r25, r1
 358:	50 f3       	brcs	.-44     	; 0x32e <ChangeMoveType+0x92>
			mtab[i]=left[i];
			mtab[9] = ARRAY_SIZE(left);
 35a:	89 e0       	ldi	r24, 0x09	; 9
 35c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
			PORTD |=(1<<leds[3]);
 360:	8b b1       	in	r24, 0x0b	; 11
 362:	80 62       	ori	r24, 0x20	; 32
 364:	8b b9       	out	0x0b, r24	; 11
			break;
 366:	08 95       	ret
		}
		case 'r':
		{
			for (int i = 0;i<ARRAY_SIZE(right);i++)
			mtab[i]=right[i];
 368:	9c 01       	movw	r18, r24
 36a:	09 2e       	mov	r0, r25
 36c:	00 0c       	add	r0, r0
 36e:	44 0b       	sbc	r20, r20
 370:	20 52       	subi	r18, 0x20	; 32
 372:	3f 4f       	sbci	r19, 0xFF	; 255
 374:	4f 4f       	sbci	r20, 0xFF	; 255
 376:	f9 01       	movw	r30, r18
 378:	24 91       	lpm	r18, Z
 37a:	47 fd       	sbrc	r20, 7
 37c:	20 81       	ld	r18, Z
 37e:	fc 01       	movw	r30, r24
 380:	e0 50       	subi	r30, 0x00	; 0
 382:	ff 4f       	sbci	r31, 0xFF	; 255
 384:	20 83       	st	Z, r18
			PORTD |=(1<<leds[3]);
			break;
		}
		case 'r':
		{
			for (int i = 0;i<ARRAY_SIZE(right);i++)
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	02 c0       	rjmp	.+4      	; 0x38e <ChangeMoveType+0xf2>
}

void ChangeMoveType(char c)
{
	step = 0;
	switch (c)//przypisanie odpowiednich wartoœci do tabeli mtab[] w zale¿noœci od otrzymanych danych
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
			PORTD |=(1<<leds[3]);
			break;
		}
		case 'r':
		{
			for (int i = 0;i<ARRAY_SIZE(right);i++)
 38e:	89 30       	cpi	r24, 0x09	; 9
 390:	91 05       	cpc	r25, r1
 392:	50 f3       	brcs	.-44     	; 0x368 <ChangeMoveType+0xcc>
			mtab[i]=right[i];
			mtab[9] = ARRAY_SIZE(right);
 394:	89 e0       	ldi	r24, 0x09	; 9
 396:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
			PORTD |=(1<<leds[4]);
 39a:	8b b1       	in	r24, 0x0b	; 11
 39c:	80 64       	ori	r24, 0x40	; 64
 39e:	8b b9       	out	0x0b, r24	; 11
			break;
 3a0:	08 95       	ret
		}
		default:
		{
			mtab [9] = 1;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
			PORTD |=(1<<leds[0]);
 3a8:	8b b1       	in	r24, 0x0b	; 11
 3aa:	84 60       	ori	r24, 0x04	; 4
 3ac:	8b b9       	out	0x0b, r24	; 11
 3ae:	08 95       	ret

Disassembly of section .text.TurnOff:

0000052c <TurnOff>:
	}
}

void TurnOff()//funkcja wy³¹czaj¹ca ledy
{
	for(int i=0;i<ARRAY_SIZE(leds)-1;i++)
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	18 c0       	rjmp	.+48     	; 0x562 <TurnOff+0x36>
	PORTD&=~(1<<leds[i]);
 532:	5b b1       	in	r21, 0x0b	; 11
 534:	9b 01       	movw	r18, r22
 536:	07 2e       	mov	r0, r23
 538:	00 0c       	add	r0, r0
 53a:	44 0b       	sbc	r20, r20
 53c:	2e 50       	subi	r18, 0x0E	; 14
 53e:	3f 4f       	sbci	r19, 0xFF	; 255
 540:	4f 4f       	sbci	r20, 0xFF	; 255
 542:	f9 01       	movw	r30, r18
 544:	24 91       	lpm	r18, Z
 546:	47 fd       	sbrc	r20, 7
 548:	20 81       	ld	r18, Z
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <TurnOff+0x28>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	2a 95       	dec	r18
 556:	e2 f7       	brpl	.-8      	; 0x550 <TurnOff+0x24>
 558:	80 95       	com	r24
 55a:	85 23       	and	r24, r21
 55c:	8b b9       	out	0x0b, r24	; 11
	}
}

void TurnOff()//funkcja wy³¹czaj¹ca ledy
{
	for(int i=0;i<ARRAY_SIZE(leds)-1;i++)
 55e:	6f 5f       	subi	r22, 0xFF	; 255
 560:	7f 4f       	sbci	r23, 0xFF	; 255
 562:	64 30       	cpi	r22, 0x04	; 4
 564:	71 05       	cpc	r23, r1
 566:	28 f3       	brcs	.-54     	; 0x532 <TurnOff+0x6>
	PORTD&=~(1<<leds[i]);
}
 568:	08 95       	ret

Disassembly of section .text.move:

00000104 <move>:

//funkcja ustawiaj¹ca odpowiedni k¹t i poruszaj¹ca servo za pomoc¹ posit()
void move(uint8_t tab[],uint8_t size)
{
	
	if(step+1>size)//je¿eli step wykroczy³ poza tablicê
 104:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <step>
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	3f 4f       	sbci	r19, 0xFF	; 255
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	62 17       	cp	r22, r18
 112:	73 07       	cpc	r23, r19
 114:	1c f4       	brge	.+6      	; 0x11c <move+0x18>
	step = 1;
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <step>

	switch(tab[step])//case w zale¿noœci od kroku w podanej tablicy
 11c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <step>
 120:	fc 01       	movw	r30, r24
 122:	e2 0f       	add	r30, r18
 124:	f1 1d       	adc	r31, r1
 126:	e0 81       	ld	r30, Z
 128:	8e 2f       	mov	r24, r30
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	89 30       	cpi	r24, 0x09	; 9
 12e:	91 05       	cpc	r25, r1
 130:	08 f0       	brcs	.+2      	; 0x134 <move+0x30>
 132:	aa c0       	rjmp	.+340    	; 0x288 <move+0x184>
 134:	fc 01       	movw	r30, r24
 136:	ec 5c       	subi	r30, 0xCC	; 204
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__tablejump2__>
	{
		case 0:   //zerowanie
		{
			pos[0]=90;
 13e:	eb e0       	ldi	r30, 0x0B	; 11
 140:	f1 e0       	ldi	r31, 0x01	; 1
 142:	8a e5       	ldi	r24, 0x5A	; 90
 144:	80 83       	st	Z, r24
			pos[1]=90;
 146:	81 83       	std	Z+1, r24	; 0x01
			pos[2]=90;
 148:	82 83       	std	Z+2, r24	; 0x02
			TurnOff();
 14a:	0e 94 96 02 	call	0x52c	; 0x52c <TurnOff>
			
			step++;
 14e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
			break;
 158:	9c c0       	rjmp	.+312    	; 0x292 <move+0x18e>
		}
		case 1:   //obrót œrodka
		{
			pos[1]++;
 15a:	eb e0       	ldi	r30, 0x0B	; 11
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	81 81       	ldd	r24, Z+1	; 0x01
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	81 83       	std	Z+1, r24	; 0x01
			if(pos[1]>=105)
 164:	81 81       	ldd	r24, Z+1	; 0x01
 166:	89 36       	cpi	r24, 0x69	; 105
 168:	28 f0       	brcs	.+10     	; 0x174 <move+0x70>
			{
				step++;
 16a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 16e:	8f 5f       	subi	r24, 0xFF	; 255
 170:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
			}
			PORTD |=(1<<leds[1]);
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	88 60       	ori	r24, 0x08	; 8
 178:	8b b9       	out	0x0b, r24	; 11
			break;
 17a:	8b c0       	rjmp	.+278    	; 0x292 <move+0x18e>
		}
		case 2:   // prawa przód, lewa ty³
		{
			pos[0]++;
 17c:	eb e0       	ldi	r30, 0x0B	; 11
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	80 81       	ld	r24, Z
 182:	8f 5f       	subi	r24, 0xFF	; 255
 184:	80 83       	st	Z, r24
			pos[2]--;
 186:	82 81       	ldd	r24, Z+2	; 0x02
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	82 83       	std	Z+2, r24	; 0x02
			
			if(pos[2] <=60 && pos[0]>=120)
 18c:	82 81       	ldd	r24, Z+2	; 0x02
 18e:	8d 33       	cpi	r24, 0x3D	; 61
 190:	08 f0       	brcs	.+2      	; 0x194 <move+0x90>
 192:	7f c0       	rjmp	.+254    	; 0x292 <move+0x18e>
 194:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <pos>
 198:	88 37       	cpi	r24, 0x78	; 120
 19a:	08 f4       	brcc	.+2      	; 0x19e <move+0x9a>
 19c:	7a c0       	rjmp	.+244    	; 0x292 <move+0x18e>
			{
				step++;
 19e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
 1a8:	74 c0       	rjmp	.+232    	; 0x292 <move+0x18e>
			}
			break;
		}
		case 3:   //obrót œrodka w drug¹
		{
			TurnOff();
 1aa:	0e 94 96 02 	call	0x52c	; 0x52c <TurnOff>
			pos[1]--;
 1ae:	eb e0       	ldi	r30, 0x0B	; 11
 1b0:	f1 e0       	ldi	r31, 0x01	; 1
 1b2:	81 81       	ldd	r24, Z+1	; 0x01
 1b4:	81 50       	subi	r24, 0x01	; 1
 1b6:	81 83       	std	Z+1, r24	; 0x01
			
			if(pos[1] <= 75)
 1b8:	81 81       	ldd	r24, Z+1	; 0x01
 1ba:	8c 34       	cpi	r24, 0x4C	; 76
 1bc:	08 f0       	brcs	.+2      	; 0x1c0 <move+0xbc>
 1be:	69 c0       	rjmp	.+210    	; 0x292 <move+0x18e>
			{
				step++;
 1c0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
 1ca:	63 c0       	rjmp	.+198    	; 0x292 <move+0x18e>
			}
			break;
		}
		case 4:   // lewa przód,  prawa ty³
		{
			pos[0]--;
 1cc:	eb e0       	ldi	r30, 0x0B	; 11
 1ce:	f1 e0       	ldi	r31, 0x01	; 1
 1d0:	80 81       	ld	r24, Z
 1d2:	81 50       	subi	r24, 0x01	; 1
 1d4:	80 83       	st	Z, r24
			pos[2]++;
 1d6:	82 81       	ldd	r24, Z+2	; 0x02
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	82 83       	std	Z+2, r24	; 0x02
			
			if(pos[0] <=60 && pos[2]>=120)
 1dc:	80 81       	ld	r24, Z
 1de:	8d 33       	cpi	r24, 0x3D	; 61
 1e0:	08 f0       	brcs	.+2      	; 0x1e4 <move+0xe0>
 1e2:	57 c0       	rjmp	.+174    	; 0x292 <move+0x18e>
 1e4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pos+0x2>
 1e8:	88 37       	cpi	r24, 0x78	; 120
 1ea:	08 f4       	brcc	.+2      	; 0x1ee <move+0xea>
 1ec:	52 c0       	rjmp	.+164    	; 0x292 <move+0x18e>
			{
				step++;
 1ee:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 1f2:	8f 5f       	subi	r24, 0xFF	; 255
 1f4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
 1f8:	4c c0       	rjmp	.+152    	; 0x292 <move+0x18e>
			}
			break;
		}
		case 5:   //zerowanie
		{
			pos[1]--;
 1fa:	eb e0       	ldi	r30, 0x0B	; 11
 1fc:	f1 e0       	ldi	r31, 0x01	; 1
 1fe:	81 81       	ldd	r24, Z+1	; 0x01
 200:	81 50       	subi	r24, 0x01	; 1
 202:	81 83       	std	Z+1, r24	; 0x01
			if(pos[1]<=90)
 204:	81 81       	ldd	r24, Z+1	; 0x01
 206:	8b 35       	cpi	r24, 0x5B	; 91
 208:	08 f0       	brcs	.+2      	; 0x20c <move+0x108>
 20a:	43 c0       	rjmp	.+134    	; 0x292 <move+0x18e>
			step++;
 20c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 210:	8f 5f       	subi	r24, 0xFF	; 255
 212:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
 216:	3d c0       	rjmp	.+122    	; 0x292 <move+0x18e>
			break;
		}
		case 6:   //zerowanie nóg
		{
			pos[0]--;
 218:	eb e0       	ldi	r30, 0x0B	; 11
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	80 81       	ld	r24, Z
 21e:	81 50       	subi	r24, 0x01	; 1
 220:	80 83       	st	Z, r24
			pos[2]++;
 222:	82 81       	ldd	r24, Z+2	; 0x02
 224:	8f 5f       	subi	r24, 0xFF	; 255
 226:	82 83       	std	Z+2, r24	; 0x02
			if(pos[0]<=90&&pos[2]>=90)
 228:	80 81       	ld	r24, Z
 22a:	8b 35       	cpi	r24, 0x5B	; 91
 22c:	90 f5       	brcc	.+100    	; 0x292 <move+0x18e>
 22e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pos+0x2>
 232:	8a 35       	cpi	r24, 0x5A	; 90
 234:	70 f1       	brcs	.+92     	; 0x292 <move+0x18e>
			step++;
 236:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 23a:	8f 5f       	subi	r24, 0xFF	; 255
 23c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
 240:	28 c0       	rjmp	.+80     	; 0x292 <move+0x18e>
			break;
		}
		case 7:   //zerowanie
		{
			pos[1]++;
 242:	eb e0       	ldi	r30, 0x0B	; 11
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	81 81       	ldd	r24, Z+1	; 0x01
 248:	8f 5f       	subi	r24, 0xFF	; 255
 24a:	81 83       	std	Z+1, r24	; 0x01
			if(pos[1]>=90)
 24c:	81 81       	ldd	r24, Z+1	; 0x01
 24e:	8a 35       	cpi	r24, 0x5A	; 90
 250:	00 f1       	brcs	.+64     	; 0x292 <move+0x18e>
			step++;
 252:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 256:	8f 5f       	subi	r24, 0xFF	; 255
 258:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
 25c:	1a c0       	rjmp	.+52     	; 0x292 <move+0x18e>
			break;
		}
		case 8:   //zerowanie nóg
		{
			pos[0]++;
 25e:	eb e0       	ldi	r30, 0x0B	; 11
 260:	f1 e0       	ldi	r31, 0x01	; 1
 262:	80 81       	ld	r24, Z
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 83       	st	Z, r24
			pos[2]--;
 268:	82 81       	ldd	r24, Z+2	; 0x02
 26a:	81 50       	subi	r24, 0x01	; 1
 26c:	82 83       	std	Z+2, r24	; 0x02
			if(pos[0]>=90&&pos[2]<=90)
 26e:	80 81       	ld	r24, Z
 270:	8a 35       	cpi	r24, 0x5A	; 90
 272:	78 f0       	brcs	.+30     	; 0x292 <move+0x18e>
 274:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pos+0x2>
 278:	8b 35       	cpi	r24, 0x5B	; 91
 27a:	58 f4       	brcc	.+22     	; 0x292 <move+0x18e>
			step++;
 27c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 280:	8f 5f       	subi	r24, 0xFF	; 255
 282:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
 286:	05 c0       	rjmp	.+10     	; 0x292 <move+0x18e>
			break;
		}
		default:
		{
			step++;
 288:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <step>
 28c:	8f 5f       	subi	r24, 0xFF	; 255
 28e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <step>
		}
	}
	posit (&pos[0]);
 292:	8b e0       	ldi	r24, 0x0B	; 11
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <posit>
 29a:	08 95       	ret

Disassembly of section .text.main:

00000438 <main>:
void CurStep();//funkcja podaj¹ca wartoœæ stp na diodach


int main()
{
	for(int i=0;i<ARRAY_SIZE(leds);i++)//ustawienie ledów jako wyjœcie
 438:	20 e0       	ldi	r18, 0x00	; 0
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	17 c0       	rjmp	.+46     	; 0x46c <main+0x34>
	{
		DDRD|=(1<<leds[i]);
 43e:	7a b1       	in	r23, 0x0a	; 10
 440:	c9 01       	movw	r24, r18
 442:	03 2e       	mov	r0, r19
 444:	00 0c       	add	r0, r0
 446:	aa 0b       	sbc	r26, r26
 448:	8e 50       	subi	r24, 0x0E	; 14
 44a:	9f 4f       	sbci	r25, 0xFF	; 255
 44c:	af 4f       	sbci	r26, 0xFF	; 255
 44e:	fc 01       	movw	r30, r24
 450:	44 91       	lpm	r20, Z
 452:	a7 fd       	sbrc	r26, 7
 454:	40 81       	ld	r20, Z
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <main+0x28>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	4a 95       	dec	r20
 462:	e2 f7       	brpl	.-8      	; 0x45c <main+0x24>
 464:	87 2b       	or	r24, r23
 466:	8a b9       	out	0x0a, r24	; 10
void CurStep();//funkcja podaj¹ca wartoœæ stp na diodach


int main()
{
	for(int i=0;i<ARRAY_SIZE(leds);i++)//ustawienie ledów jako wyjœcie
 468:	2f 5f       	subi	r18, 0xFF	; 255
 46a:	3f 4f       	sbci	r19, 0xFF	; 255
 46c:	25 30       	cpi	r18, 0x05	; 5
 46e:	31 05       	cpc	r19, r1
 470:	30 f3       	brcs	.-52     	; 0x43e <main+0x6>
	{
		DDRD|=(1<<leds[i]);
	}
	PWM_Init();//wywolanie inicjalizacji PWM
 472:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <PWM_Init>
	USART_Init ( MYUBRR );//wywolanie inicjalizacji UART
 476:	87 e6       	ldi	r24, 0x67	; 103
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 13 03 	call	0x626	; 0x626 <USART_Init>
	Timer0Init();
 47e:	0e 94 07 03 	call	0x60e	; 0x60e <Timer0Init>
	
	sei();//uruchomienie przerwañ
 482:	78 94       	sei

	while (1)
	{
		if(t>=intnumber)
 484:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <t>
 488:	88 23       	and	r24, r24
 48a:	41 f0       	breq	.+16     	; 0x49c <main+0x64>
		{
			t=0;
 48c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <t>
			// CurStep();
			move (mtab,mtab[9]);//funkcja ustawiaj¹ca odpowiedni k¹t i poruszaj¹ca servo za pomoc¹ posit()
 490:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	0e 94 82 00 	call	0x104	; 0x104 <move>
		}
		
		if(received)//je¿eli zosta³y odebrane dane
 49c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <received>
 4a0:	88 23       	and	r24, r24
 4a2:	81 f3       	breq	.-32     	; 0x484 <main+0x4c>
		{
			TurnOff();//wy³¹czenie diod
 4a4:	0e 94 96 02 	call	0x52c	; 0x52c <TurnOff>
			ChangeMoveType(buf);
 4a8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <buf>
 4ac:	0e 94 4e 01 	call	0x29c	; 0x29c <ChangeMoveType>
			received = false;//ustawienie flagi na false, poniewa¿ ju¿ zmieniliœmy dane na nowe w tabeli mtab[]
 4b0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <received>
 4b4:	e7 cf       	rjmp	.-50     	; 0x484 <main+0x4c>

Disassembly of section .text.libgcc.div:

0000059c <__divmodhi4>:
 59c:	97 fb       	bst	r25, 7
 59e:	07 2e       	mov	r0, r23
 5a0:	16 f4       	brtc	.+4      	; 0x5a6 <__divmodhi4+0xa>
 5a2:	00 94       	com	r0
 5a4:	07 d0       	rcall	.+14     	; 0x5b4 <__divmodhi4_neg1>
 5a6:	77 fd       	sbrc	r23, 7
 5a8:	09 d0       	rcall	.+18     	; 0x5bc <__divmodhi4_neg2>
 5aa:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__udivmodhi4>
 5ae:	07 fc       	sbrc	r0, 7
 5b0:	05 d0       	rcall	.+10     	; 0x5bc <__divmodhi4_neg2>
 5b2:	3e f4       	brtc	.+14     	; 0x5c2 <__divmodhi4_exit>

000005b4 <__divmodhi4_neg1>:
 5b4:	90 95       	com	r25
 5b6:	81 95       	neg	r24
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	08 95       	ret

000005bc <__divmodhi4_neg2>:
 5bc:	70 95       	com	r23
 5be:	61 95       	neg	r22
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255

000005c2 <__divmodhi4_exit>:
 5c2:	08 95       	ret

Disassembly of section .text.libgcc:

0000063c <__tablejump2__>:
 63c:	ee 0f       	add	r30, r30
 63e:	ff 1f       	adc	r31, r31
 640:	05 90       	lpm	r0, Z+
 642:	f4 91       	lpm	r31, Z
 644:	e0 2d       	mov	r30, r0
 646:	09 94       	ijmp

Disassembly of section .text.libgcc.div:

000005c4 <__udivmodhi4>:
 5c4:	aa 1b       	sub	r26, r26
 5c6:	bb 1b       	sub	r27, r27
 5c8:	51 e1       	ldi	r21, 0x11	; 17
 5ca:	07 c0       	rjmp	.+14     	; 0x5da <__udivmodhi4_ep>

000005cc <__udivmodhi4_loop>:
 5cc:	aa 1f       	adc	r26, r26
 5ce:	bb 1f       	adc	r27, r27
 5d0:	a6 17       	cp	r26, r22
 5d2:	b7 07       	cpc	r27, r23
 5d4:	10 f0       	brcs	.+4      	; 0x5da <__udivmodhi4_ep>
 5d6:	a6 1b       	sub	r26, r22
 5d8:	b7 0b       	sbc	r27, r23

000005da <__udivmodhi4_ep>:
 5da:	88 1f       	adc	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	5a 95       	dec	r21
 5e0:	a9 f7       	brne	.-22     	; 0x5cc <__udivmodhi4_loop>
 5e2:	80 95       	com	r24
 5e4:	90 95       	com	r25
 5e6:	bc 01       	movw	r22, r24
 5e8:	cd 01       	movw	r24, r26
 5ea:	08 95       	ret
